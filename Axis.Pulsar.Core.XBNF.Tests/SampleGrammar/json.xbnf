#
# JSON grammar with line comment support
#

$json -> +[$block-space.? ?[$json-object $json-list] $block-space.?]

# Whitespaces
$block-space -> ?[$line-comment $space $tab $line-feed $carriage-return].+
$line-comment -> @DelimitedContent{start:'//', content-rule: 'icr: \x0d, \x0a'}
$space -> '\s'
$tab -> '\t'
$line-feed -> "\n"
$carriage-return -> '\r'


# Json value
$json-value -> ?[
	$json-object
	$json-list
	$json-string
	$json-number
	$json-boolean
	$json-null
]


# Object
$json-object -> +[
	'{'
	$block-space.?
	$property.?
	+[
		$block-space.?
		","
		$block-space.?
		$property
	].*
	$block-space.?
	'}'
]
$property -> +[
	$json-string
	$block-space.?
	':'
	$block-space.?
	$json-value
]


# List
$json-list -> +[
	'['
	$block-space.?
	$json-value.?
	+[
		$block-space.?
		","
		$block-space.?
		$json-value
	].*
	$block-space.?
	']'
]

# Number
$json-number -> ?[$decimal $int]

$int -> ?[$binary-int $hex-int $regular-int]
$binary-int -> /^0[bB][01](_?[01])*$/{match-type: '3,+'}
$hex-int -> /^0[xX][0-9A-Fa-f](_?[0-9A-Fa-f])*$/{match-type: '3,+'}
$regular-int -> /^-?\d(_?\d)*$/{match-type: '2,+'}

$decimal -> ?[$scientific-decimal $regular-decimal]
$regular-decimal -> :2 +[$regular-int '.' $digits]
$scientific-decimal -> :4 +[
	$regular-int
	+['.' $digits.?].?
	'E' $number-sign.? $digits]
$digits -> /^\d+\z/
$number-sign -> ?['+' '\-']


# String
$json-string -> @DelimitedContent{start: '"', end: '"', end-escape: '\\"', content-rule: 'default'}


# Boolean
$json-boolean -> ?["true" "false"]


# Null
$json-null -> "null"
