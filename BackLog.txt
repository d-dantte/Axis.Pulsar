
2016-07-06 =======================================================
1. Review the 'Any' production-combiner in the grammer namespace. it currently repeats parsing unnecessarily
2. I have found that production that has a MinCardinality of 0 must be in a sequence preceeded or succeeded 
   by some other production whose MinCardinality is greater than 0 - else if such a setup is within another
   production whose MaxCardinality is unbounded, you'll have an infinite loop on your hands.
3. The Language.xsd document is grossly outdated and needs to be updated - although i dont use it to verify
   the actual language anymore.


2022-04-17 ======================================================
1. Combine contents of the Recognizers and Parsers namespaces back together. [ditched]
2. 2 successful result variants should exist: [ditched]
	a. SymbolSuccess, that represents the successful parsing of a single symbol.
	b. SymbolGroupSuccess, that represetns the successful parsing of a group of symbols
	c. All parse methods will now consider the recognition threshold.
3. Make sure that the Grammar rules and SymbolExpressions all validate Cardinality against RecognitionThreshold. [ditched]
   This ensures that we will never have a scenario where the cardinality passes and the threshold doesn't.

   After much rumination, this seems to be a bad idea. I'm going to look at videos on how to implement parsers,
   I should get better ideas about implementing that partial parsing feature from those.
   ps: get rid of the "RecognitionThreshold" feature.


2022-07-15 ======================================================
1. RecognitionThreshold birthed the concept of Partial recognitions - a failure state that one can use in reporting that
   a symbol was definitely what was expected. Useful in Choice/Set recognizers. 
2. Recognizers are now used for SymbolExpressions, while parsers are used for actual symbols.
3. Results are designed as discriminated unions now:
	a. Success: the parse/recognition operation was successful
	b. Failure: The parse/recognition operation failed
	c. PartialFailure: The parse operation failed, but successfully maatched a 'RecognitionThreshold' minimum symbols.
	   Expression parsers are the true source of this result
	e. Exception: Something exceptional occured, outside of the scope of the algorithm. E.g arithmetic error, null 
	   exceptions, array out of bounds exception, class cast exception, etc...


TODO
1. Add support to Choice/Set recognizers for acknowledging, and stopping on partial failures - i.e treat them as HARD failures.
2. Find a more complex grammar, translate it into xBNF or Xml, build the grammar, and test out the performance and correctness
   of Pulsar.
3. Incrementally add language validation for edge cases - e.g, when symbols with 0 min cardinality being placed in a row of at least 2, 
   there tends to be infinite loop when these are "children" of a symbol with unbounded max-cardinality.
4. Add and refine the code comments/documentations.
5. Publish to nuget. 
   [Done]
6. Patterns such as '^(//|[^/])*$', with a min-match of 1, will fail if given strings like this '//stuff', which are meant to be correct.
   The reason is that the min-match forces the parser to pull in a single character first, which is the terminating character. How do we
   work around this?
   Solution: min-match also, upon failure, forces the pattern parser to detect at least "min-match" number of characters before reporting a failure.
   [Done]

7. Validation Rules
	1. rules shouldn't refer to themselves unless there is some choice that terminates the recursion within the rule.
	2. 

8. For xBnf, Add suport for short-hand notations for zero-or-more (*), one-or-more (+), zero-or-one (?).
   [Done]
9. Add symbol validators: these are essentially lambda functions that take a symbol instance, perform some form of validation, and return
   true or false. If true, the symbol is allowed to be created, else the parsing of that symbol fails. This mechanism should be baked into
   the TryParse(xxx) methods of the parsers and recognizers where applicable.
   [Done]
10. BNFRule.xml should recognize proper escaping for the rules that need them.
	a. pattern-literal: recognize // as the escape for /
	b. case-literal: recognizes \" as escape for "
	c. non-case-literal: recognizes \' as escape for '
	[Done]
11. Pattern rules now fall into 2 categories:
	1. Open-Pattern: where the number of characters to match is potentially infinite, and a 'maximum-mismatch' that specifies how many 
	   non-matches the parser should try before either reporting success (with the already matched tokens), or failure (if no token was matched).
	2. Closed-Pattern: where the number of characters to match is fixed and known, having a max and min value. The parser pulls in the max number
	   of tokens (or as many as can be pulled from the buffer), and counts backwards towards the min value till a match is found.
    [Done]
12. Change implementation of xAntlr's $line-indent-space to support any kind of white-space, cus that's what the actual language supports.
    see here: https://github.com/antlr/antlr4/blob/master/doc/grammars.md, and here: https://github.com/antlr/antlr4/blob/master/doc/getting-started.md
	xAntlr has been deprecated
13. Include support for special terminals. These are IAtomicRule instances that perform specialized processing of the BufferedTokenReader's output tokens.
	An example (and the reason for adding support) is with the need to recognize string literal patterns - i.e, strings like those in c-like programming
	languages: "foo, bar 54£%$$". Using regular expressions for this is insufficient, as representing escaped characters adequately is impossible. E.g,
	a regex that recognizes "\"", and also "\\" will have problems when it meets this: "\\\"". A Delimited string is Special Terminal that is
	configurable to recognize cases like the above.
	Each Special Terminal will have it's own symbol name that can be used while writing the gramma (and possilbly parametarized?).
	[DONE]



2023-02-05 =================================================================
1. Include support for character class specification. This can then be implemented via the special terminals as parameters.
   If the special terminal implementation doesn't work, just have it as a native implementation.
   Essentially, character classes are things like [a-z], or ^[a-z]; but this should be implemented to support the entire unicode character set.
   * Investigate if this can be done using regular expressions.


2023-03-25 =================================================================
1. Include support for visual studio syntax highlighting. see here for guideance: https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
2. Expand support for comments and whitespaces in xbnf lang
3. Include an optional trace-writer for the recognizers so printing out the trace can be used as a debug tool
4. Include support for importing languages from other sources, and referencing their productions via some namespace


2024-01-22 =================================================================
Going forward, backlogs, issues, proposals, tasks, etc, have been moved to the github project (https://github.com/users/d-dantte/projects/8/views/1).
